#!/usr/bin/env node

const _ = require('underscore');
const fs = require('fs');
const path = require('path');
const logger = require('../lib/logger')('lint migrations');

const errors = [];
const migrationsPath = path.resolve(process.argv.slice(2)[0] || 'migrations');

const migrations = _(fs.readdirSync(migrationsPath))
	.filter((name) => name.match(/^\d+_\w+\.js$/));

function checkEmptyTags() {
	return Promise.all(_(migrations).map(async (name) => {
		const importedModule = await import(path.join(migrationsPath, name));
		const migration = importedModule.default || importedModule;

		if (_(migration.tags).isEmpty()) {
			errors.push('empty tags in ' + name);
		}
	}));
}

function checkDups() {
	_(migrations).chain()
		.groupBy((name) => name.match(/^(\d+)/)[1])
		.each((names) => {
			if (names.length > 1) {
				errors.push('duplicated numbers: ' + names.join(', '));
			}
		});
}

function checkGaps() {
	const migrationNumbers = _(migrations)
		.map((name) => Number(name.match(/^(\d+)/)[1]));
	const expectedNumbers = _.range(1, migrations.length + 1);
	const diff = _.difference(migrationNumbers, expectedNumbers);
	const expectedDiff = _.difference(expectedNumbers, migrationNumbers);

	if (!_(diff).isEmpty()) {
		errors.push('gap in numbers: ' + diff.join(', '));
		errors.push('expected numbers: ' + expectedDiff.join(', '));
	}
}

async function main() {
	await checkEmptyTags();
	checkDups();
	checkGaps();

	_(errors).each((error) => {
		logger.error(error);
	});

	process.exit(errors.length > 0 ? -1 : 0);
}

main();
